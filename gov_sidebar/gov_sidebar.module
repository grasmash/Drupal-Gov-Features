<?php
/**
 * @file
 * Code for the GOV Sidebar feature.
 *
 * @package gov_sidebar
 */

include_once 'gov_sidebar.features.inc';

/**
 * Implements hook_form_FORM_ID_alter().
 */
function gov_sidebar_form_gov_sitewide_admin_form_alter(&$form, &$form_state, $form_id) {
  $form['gov_sidebar_autocreate'] = array(
    '#type' => 'checkbox',
    '#title' => t('Automatically create organization sidebars'),
    '#description' => t('If checked, a sidebar node will automatically be created whenever a new organization node is created.'),
    '#default_value' => variable_get('gov_sidebar_autocreate', TRUE),
  );
}

/**
 * Implements hook_entity_insert().
 *
 * Creates an associated sidebar when organization is created.
 */
function gov_sidebar_entity_insert($entity, $type) {
  if (isset($entity->type) && $entity->type == 'organization') {
    module_load_include('inc', 'gov_sidebar');

    if (variable_get('gov_sidebar_autocreate', TRUE)) {
      $sidebar = gov_sidebar_create_sidebar($entity);
      if (!empty($sidebar->nid)) {
        drupal_set_message(t('Sidebar node created for @org.', array('@org' => $entity->title)));
      }
      else {
        drupal_set_message(t('An error occurred when attempting to create a sidebar node for @org.', array('@org' => $entity->title)));
      }
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Prevents direct deletion of sidebars.
 */
function gov_sidebar_form_node_delete_confirm_alter(&$form, &$form_state, $form_id) {
  if ($form['#node']->type == 'sidebar') {
    $form['actions']['submit']['#access'] = FALSE;
    $form['description']['#markup'] = t('You may not delete sidebar nodes. When the associated organization node is deleted, the sidebar will be deleted automatically.');
  }
}

/**
 * Implements hook_node_delete().
 *
 * Deletes associated sidebar when organization is deleted.
 */
function gov_sidebar_node_delete($node) {
  if ($node->type == 'organization') {
    $nids = gov_sidebar_og_sidebar_load_multiple($node);
    if ($nids) {
      node_delete_multiple($nids);
      drupal_set_message(t('All sidebar nodes belonging to @org have been deleted.', array('@org' => $node->title)));
    }
  }
}

/**
 * Loads all sidebar nodes for a given organic group.
 *
 * @param object $group
 *   (optional) The organic group for which sidebar should be returned.
 *   Defaults to group from current context.
 *
 * @return array
 *   An array of node ids of group sidebars.
 */
function gov_sidebar_og_sidebar_load_multiple($group = NULL) {
  $nids = array();

  if (!$group) {
    $group_context = og_context();
    if ($group_context && $group_context['group_type'] == 'node') {
      $group = node_load($group_context['gid']);
    }
  }

  if ($group) {
    // Find all sidebar nodes that are a member of this group. There should
    // only be one!
    $query = new EntityFieldQuery();
    $query->entityCondition('entity_type', 'node')
      ->entityCondition('bundle', 'sidebar')
      ->fieldCondition('og_group_ref', 'target_id', $group->nid, '=')
      ->addMetaData('account', user_load(1));
    $result = $query->execute();

    if (isset($result['node'])) {
      $nids = array_keys($result['node']);
    }
  }

  return $nids;
}

/**
 * Implements hook_entity_view().
 */
function gov_sidebar_entity_view($entity, $type, $view_mode, $langcode) {
  if ($type == 'node' && $entity->type == 'sidebar' && $view_mode == 'full') {
    // This additional check is needed in case a full sidebar node is being
    // rendered by a module like views or panels.
    if (arg(0) == 'node' && arg(1) == $entity->nid) {
      // Prevent sidebar nodes from being viewed directly. Panels IPE creates a
      // confusing interface when a sidebar node is being viewed in 'full' while
      // it is also being rendered as a nodeblock in the sidebar via context.
      $groups = field_get_items($type, $entity, 'og_group_ref');
      if ($group = reset($groups)) {
        $group_nid = $group['target_id'];
        drupal_set_message('Sidebar nodes may not be viewed directly. You have been redirected to the Organic Group associated with this sidebar.', 'warning');
        drupal_goto('node/' . $group_nid);
      }
    }
  }
}

/**
 * Implements hook_views_pre_view().
 */
function gov_sidebar_views_pre_build(&$view) {
  // By default, the og_sidebar view is set not to be cached. This is necessary
  // for Panels IPE rendering to work correctly for administrators.
  if ($view->name == 'og_sidebar') {
    // Render the cached view for anonymous users and users who are not
    // permitted to update the sidebar.
    if (user_is_anonymous() || !gov_sidebar_access('update')) {
      // Implement a time based cache plugin.
      $view->display_handler->override_option('cache', array(
        'type' => 'time',
        'results_lifespan' => variable_get('views_cache_bully_results_lifespan', 3600),
        'output_lifespan' => variable_get('views_cache_bully_output_lifespan', 3600),
      ));
    }
  }
}

/**
 * Determines current user's access to the current group's sidebars.
 *
 * @param string $op
 *   The node operation for which to check access.
 *
 * @return bool
 *   Returns TRUE if the current user can access at least of the current
 *   organic group's sidebars.
 */
function gov_sidebar_access($op) {
  $nids = gov_sidebar_og_sidebar_load_multiple();
  if ($nids) {
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $node) {
      if (node_access($op, $node)) {
        return TRUE;
      }
    }
  }

  return FALSE;
}
